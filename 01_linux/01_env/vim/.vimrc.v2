" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)
set hlsearch

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

":filetype plugin on

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'git://github.com/scrooloose/nerdtree.git'
Plugin 'taglist.vim'
Plugin 'Valloric/YouCompleteMe'
call vundle#end()

colorscheme molokai "set colorscheme

syntax enable "enable syntax processing

set tabstop=4 "number of visaul spaces per TAB
set softtabstop=4 "number of spaces in tab when editing
set expandtab "tab are spaces

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree setting
" install: BundleInstall 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F3> :NERDTreeToggle<CR>
"autocmd vimenter * NERDTree
" 显示行号 
let NERDTreeShowLineNumbers=1 
let NERDTreeAutoCenter=1 
" 是否显示隐藏文件 
let NERDTreeShowHidden=1 
" 设置宽度 
let NERDTreeWinSize=25 
" 在终端启动vim时，共享NERDTree 
let g:nerdtree_tabs_open_on_console_startup=1 
" 忽略一下文件的显示 
let NERDTreeIgnore=['\.pyc','\~$','\.swp'] 
" 显示书签列表 
let NERDTreeShowBookmarks=1

set number
set showcmd "TODO
set cursorline
filetype indent on "load filetype-specific indent files, TODO
set wildmenu "visual autocomplete for command menu TODO
set lazyredraw "redraw only when we need to
set showmatch
set incsearch
set foldenable 
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent
"set mouse=a

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctags setting
" install: sudo apt-get install ctags 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"map <F12> :!ctags -R --c++-kinds=+p --fields=+iaSl --extra=+q --exclude=*.so --exclude=*.so.* --exclude=*.la --exclude=*.a --exclude=*_bin* --exclude=*_lib* --exclude=*.bin* --exclude=*.lib* --exclude=*_include* --exclude=common_inc --languages=c++ .<CR>
map <F12> :!ctags -R --c++-kinds=+p --fields=+iaSl --extra=+q --exclude=*.so --exclude=*.so.* --exclude=*.la --exclude=*.a --exclude=*_bin* --exclude=*_lib* --exclude=*.bin* --exclude=*.lib* --exclude=*_include* --exclude=common_inc --languages=c++ .<CR> :!cscope -Rbq <CR> cs add cscope.out <CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setting
" install: sudo apt-get install cscope
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
  set csprg=/usr/bin/cscope
  set csto=1
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
      cs add cscope.out
  endif
  set csverb
endif

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" taglist setting
" install: BundleInstall 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=tags;
set autochdir

" taglist
map <F9> :TlistToggle<CR>
imap <F9> <ESC> :TlistToggle<CR>
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_SingleClick = 1
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Use_Right_Window = 1
let Tlist_WinWidth = 45

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe setting
" install: BundleInstall 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
"nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
"let g:ycm_python_binary_path = '/usr/bin/python'
"nmap<C-a> :YcmCompleter FixIt<CR>
